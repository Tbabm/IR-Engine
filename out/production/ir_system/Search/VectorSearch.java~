package Search;

import Index.PostingItem;
import Index.Record;
import Index.ReverseIndex;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

/**
 * Created by Henry on 2015/6/6.
 */
public class VectorSearch {

    /**
     * 获得查询结果
     * @param search 查询词
     * @return re 文档的ID列表
     */
    public static List<Integer> getResult(String search){
        List<Integer> re = new ArrayList<Integer>();
        //还原成词干的过程
        //处理查询
        HashMap<Integer, Double> hashmap = new HashMap<Integer, Double>();
        List< Pair<String, Integer> > queryRecords = convertQuery(search.split(" "));
        for (Pair<String, Integer> record : queryRecords){
                string word = record.first;
                Record rQuery = new Record(record.second);
        	PostingItem lst = ReverseIndex.getPostingLinks(word);

        	for (Record record : lst.records) {
        		int docID = record.getDocID();
	        	Double w_curr = hashmap.get(docID);
	        	if(w_curr==null) {
	        		w_curr = new Double(0);
	        	}
	        	w_curr += (record.getLogTf()*lst.getIdf()) * (rQuery.getLogTf()*lst.getIdf());
        	}

        	
        }
        return re;
    }
    
    private static List< Pair<String, Integer> > convertQuery(String[] words)
    {
    	List< Pair<String, Integer> > ret = new ArrayList<Pair<String, Integer> >();
    	Arrays.sort(words);
    	String prev = null;
    	boolean first = true;
    	int cnt = 0;
    	for (String word: words) {
    		if(first) {
    			prev = word;
    			cnt = 0;
    		}
    		else{
    			if(word!=prev) {
    				ret.add(new Pair<String, Integer>(prev, cnt));
    				cnt = 0;
    				prev = word;
    			}
    		}
			++cnt;
    	}
		ret.add(new Pair<String, Integer>(prev, cnt));
    	return ret;
    }

    /**
     * 对查询结果的排序
     * @param doc_id 结果文档列表
     */
    private static void sort_docid(List<Integer> doc_id){

    }
}

